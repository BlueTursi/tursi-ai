name: Version Bump

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install conventional-changelog-cli
          
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(python setup.py --version)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
      - name: Generate changelog
        run: |
          # Generate changelog
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          
      - name: Check for version bump
        id: check_bump
        run: |
          # Check if there are any breaking changes or features that require a version bump
          if grep -q "BREAKING CHANGE" CHANGELOG.md; then
            # Major version bump
            NEW_VERSION=$(echo ${{ steps.get_version.outputs.current_version }} | awk -F. '{print $1+1".0.0"}')
          elif grep -q "feat:" CHANGELOG.md; then
            # Minor version bump
            NEW_VERSION=$(echo ${{ steps.get_version.outputs.current_version }} | awk -F. '{print $1"."$2+1".0"}')
          elif grep -q "fix:" CHANGELOG.md || grep -q "docs:" CHANGELOG.md || grep -q "ci:" CHANGELOG.md; then
            # Patch version bump
            NEW_VERSION=$(echo ${{ steps.get_version.outputs.current_version }} | awk -F. '{print $1"."$2"."$3+1"}')
          else
            NEW_VERSION=${{ steps.get_version.outputs.current_version }}
          fi
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Update version
        if: steps.check_bump.outputs.new_version != steps.get_version.outputs.current_version
        run: |
          # Update version in setup.py
          sed -i "s/version=\".*\"/version=\"${{ steps.check_bump.outputs.new_version }}\"/" setup.py
          
          # Commit changes
          git add setup.py CHANGELOG.md
          git commit -m "chore(release): bump version to ${{ steps.check_bump.outputs.new_version }}"
          git push origin HEAD:main
          
          # Create and push tag
          git tag -a "v${{ steps.check_bump.outputs.new_version }}" -m "Release v${{ steps.check_bump.outputs.new_version }}"
          git push origin "v${{ steps.check_bump.outputs.new_version }}" 
name: Version & Release

on:
  push:
    branches:
      - 'release/*'
    tags:
      - 'v*.*.*'
  pull_request:
    types: [labeled]

permissions:
  contents: write
  packages: write

jobs:
  version-bump:
    if: "!startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          poetry run pip install python-semantic-release

      - name: Determine version type
        id: version_type
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.label.name }}" == "major" ]]; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.label.name }}" == "minor" ]]; then
              echo "type=minor" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.label.name }}" == "alpha" ]]; then
              echo "type=alpha" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.label.name }}" == "beta" ]]; then
              echo "type=beta" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          else
            # Extract version from branch name for release branches
            if [[ "${{ github.ref }}" =~ ^refs/heads/release/v[0-9]+\.[0-9]+\.[0-9]+(-[a-z]+\.[0-9]+)?$ ]]; then
              version=$(echo "${{ github.ref }}" | sed 's/.*release\/v//')
              echo "version=$version" >> $GITHUB_OUTPUT
              echo "type=release" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Update version and changelog
        run: |
          if [[ "${{ steps.version_type.outputs.type }}" == "release" ]]; then
            # Use exact version from release branch
            poetry version ${{ steps.version_type.outputs.version }}
          else
            # Update version based on type
            if [[ "${{ steps.version_type.outputs.type }}" == "major" ]]; then
              poetry version major
            elif [[ "${{ steps.version_type.outputs.type }}" == "minor" ]]; then
              poetry version minor
            elif [[ "${{ steps.version_type.outputs.type }}" == "alpha" ]]; then
              current_version=$(poetry version -s)
              poetry version "${current_version}-alpha.1"
            elif [[ "${{ steps.version_type.outputs.type }}" == "beta" ]]; then
              current_version=$(poetry version -s)
              poetry version "${current_version}-beta.1"
            else
              poetry version patch
            fi
          fi

          # Generate detailed changelog
          poetry run semantic-release changelog --unreleased > new_changes.md

          # Add version header
          echo "# Version $(poetry version -s) ($(date +%Y-%m-%d))" > version_changes.md
          echo "" >> version_changes.md
          cat new_changes.md >> version_changes.md

          # Update main changelog
          if [ -f CHANGELOG.md ]; then
            cat version_changes.md CHANGELOG.md > temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            mv version_changes.md CHANGELOG.md
          fi

          # Show the changes
          git diff

          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml CHANGELOG.md
          git commit -m "chore(release): bump version to $(poetry version -s)"

          # Only push changes and create tag on release branches
          if [[ "${{ steps.version_type.outputs.type }}" == "release" ]]; then
            git push
            git tag -a "v$(poetry version -s)" -m "v$(poetry version -s)"
            git push --tags
          fi

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Preparing release for version $VERSION"

      - name: Verify version consistency
        run: |
          # Check pyproject.toml version
          if ! grep -q "version = \"${{ steps.get_version.outputs.version }}\"" pyproject.toml; then
            echo "Error: Version mismatch between tag (${{ steps.get_version.outputs.version }}) and pyproject.toml"
            exit 1
          fi

          # Check CHANGELOG.md entry
          if ! grep -q "\[${{ steps.get_version.outputs.version }}\]" CHANGELOG.md; then
            echo "Error: No changelog entry found for version ${{ steps.get_version.outputs.version }}"
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          poetry run pip install twine

      - name: Run tests
        run: poetry run pytest

      - name: Clean dist directory
        run: |
          rm -rf dist/
          mkdir -p dist/

      - name: Build package
        run: poetry build

      - name: Check distribution
        run: |
          poetry run twine check dist/*

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(github.ref, '-alpha.') || contains(github.ref, '-beta.') || contains(github.ref, '-rc.') }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: .github/release-template.md
          generate_release_notes: true

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

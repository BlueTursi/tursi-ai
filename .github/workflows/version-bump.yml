name: Version Bump

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'chore(release)') == false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools
          pip install python-semantic-release
          pip install -r requirements-dev.txt
          pip install -r requirements.txt
          
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(python setup.py --version)
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
      - name: Determine version bump
        id: check_bump
        run: |
          # Check commit messages since last tag for version bump type
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          if [ "$LAST_TAG" = "none" ]; then
            COMMITS=$(git log --format=%B)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --format=%B)
          fi
          
          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            # Major version bump
            NEW_VERSION=$(echo ${{ steps.get_version.outputs.current_version }} | awk -F. '{print $1+1".0.0"}')
          elif echo "$COMMITS" | grep -q "^feat"; then
            # Minor version bump
            NEW_VERSION=$(echo ${{ steps.get_version.outputs.current_version }} | awk -F. '{print $1"."$2+1".0"}')
          elif echo "$COMMITS" | grep -qE "^(fix|docs|ci|test)"; then
            # Patch version bump
            NEW_VERSION=$(echo ${{ steps.get_version.outputs.current_version }} | awk -F. '{print $1"."$2"."$3+1"}')
          else
            NEW_VERSION=${{ steps.get_version.outputs.current_version }}
          fi
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Update version and changelog
        if: steps.check_bump.outputs.new_version != steps.get_version.outputs.current_version
        run: |
          # Update version in setup.py
          sed -i "s/version=\".*\"/version=\"${{ steps.check_bump.outputs.new_version }}\"/" setup.py
          
          # Generate changelog
          semantic-release changelog --unreleased > new_changes.md
          if [ -f CHANGELOG.md ]; then
            cat new_changes.md CHANGELOG.md > temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            mv new_changes.md CHANGELOG.md
          fi
          
          # Show the changes
          git diff
          
          # Commit changes
          git add setup.py CHANGELOG.md
          git commit -m "chore(release): bump version to ${{ steps.check_bump.outputs.new_version }}"
          git push origin HEAD:main
          
          # Create and push tag
          git tag -a "v${{ steps.check_bump.outputs.new_version }}" -m "Release v${{ steps.check_bump.outputs.new_version }}"
          git push origin "v${{ steps.check_bump.outputs.new_version }}" 
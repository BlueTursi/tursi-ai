name: Version Bump

on:
  push:
    branches:
      - main
  pull_request:
    types: [labeled]

jobs:
  version-bump:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          poetry run pip install python-semantic-release

      - name: Determine version bump type
        id: version_type
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ github.event.label.name }}" == "major" ]]; then
              echo "type=major" >> $GITHUB_OUTPUT
              echo "tag_prefix=release/v" >> $GITHUB_OUTPUT
            elif [[ "${{ github.event.label.name }}" == "minor" ]]; then
              echo "type=minor" >> $GITHUB_OUTPUT
              echo "tag_prefix=release/v" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
              echo "tag_prefix=patch/v" >> $GITHUB_OUTPUT
            fi
          else
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "tag_prefix=patch/v" >> $GITHUB_OUTPUT
          fi

      - name: Update version and changelog
        run: |
          # Update version based on type
          if [[ "${{ steps.version_type.outputs.type }}" == "major" ]]; then
            poetry version major
          elif [[ "${{ steps.version_type.outputs.type }}" == "minor" ]]; then
            poetry version minor
          else
            poetry version patch
          fi
          
          # Generate detailed changelog
          poetry run semantic-release changelog --unreleased > new_changes.md
          
          # Add version header
          echo "# Version $(poetry version -s) ($(date +%Y-%m-%d))" > version_changes.md
          echo "" >> version_changes.md
          cat new_changes.md >> version_changes.md
          
          # Update main changelog
          if [ -f CHANGELOG.md ]; then
            cat version_changes.md CHANGELOG.md > temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            mv version_changes.md CHANGELOG.md
          fi
          
          # Show the changes
          git diff
          
          # Commit changes
          git add pyproject.toml CHANGELOG.md
          git commit -m "chore(release): bump version to $(poetry version -s)"
          git push origin HEAD:main
          
          # Create and push tag with appropriate prefix
          git tag -a "${{ steps.version_type.outputs.tag_prefix }}$(poetry version -s)" -m "${{ steps.version_type.outputs.tag_prefix }}$(poetry version -s)"
          git push origin "${{ steps.version_type.outputs.tag_prefix }}$(poetry version -s)" 
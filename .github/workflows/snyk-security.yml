# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which sets up Snyk to analyze the full Snyk platform (Snyk Open Source, Snyk Code,
# Snyk Container and Snyk Infrastructure as Code)
# The setup installs the Snyk CLI - for more details on the possible commands
# check https://docs.snyk.io/snyk-cli/cli-reference
# The results of Snyk Code are then uploaded to GitHub Security Code Scanning
#
# In order to use the Snyk Action you will need to have a Snyk API token.
# More details in https://github.com/snyk/actions#getting-your-snyk-token
# or you can signup for free at https://snyk.io/login
#
# For more examples, including how to limit scans to only high-severity issues
# and fail PR checks, see https://github.com/snyk/actions/

name: Snyk Security

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache virtual environment
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-python-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Set up Snyk CLI
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Snyk Code test
        continue-on-error: true
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            poetry run snyk code test --sarif > snyk-code.sarif || echo '{
              "version": "2.1.0",
              "runs": [{
                "tool": {
                  "driver": {
                    "name": "Snyk Code",
                    "version": "1.0.0"
                  }
                },
                "results": []
              }]
            }' > snyk-code.sarif
          else
            echo "Skipping Snyk Code test: SNYK_TOKEN not set"
            echo '{
              "version": "2.1.0",
              "runs": [{
                "tool": {
                  "driver": {
                    "name": "Snyk Code",
                    "version": "1.0.0"
                  }
                },
                "results": []
              }]
            }' > snyk-code.sarif
          fi

      - name: Snyk Open Source monitor
        continue-on-error: true
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            poetry run snyk monitor --all-projects
          else
            echo "Skipping Snyk Open Source monitor: SNYK_TOKEN not set"
          fi

      - name: Snyk IaC test and report
        continue-on-error: true
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            poetry run snyk iac test --report || true
          else
            echo "Skipping Snyk IaC test: SNYK_TOKEN not set"
          fi

      - name: Upload result to GitHub Code Scanning
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif

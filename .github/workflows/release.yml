name: Release

description: >
  Secure, reliable release workflow with version consistency, changelog, and security checks.

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version tag'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  pre-check:
    name: Check version consistency
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from pyproject.toml
        id: extract_version
        run: |
          VERSION=$(python3 -c "import tomllib; print(tomllib.load(open('pyproject.toml','rb'))['tool']['poetry']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check version matches input
        run: |
          INPUT_VERSION="${{ github.event.inputs.version }}"
          PYPROJECT_VERSION="${{ steps.extract_version.outputs.version }}"
          if [[ "$INPUT_VERSION" != "v$PYPROJECT_VERSION" ]]; then
            echo "ERROR: Tag version ($INPUT_VERSION) does not match pyproject.toml version (v$PYPROJECT_VERSION)" >&2
            exit 1
          fi

  security:
    name: Security scan
    runs-on: ubuntu-latest
    needs: pre-check
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        with:
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Upload Snyk results (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-results
          path: snyk*report*

  build-release:
    name: Build and publish release
    needs: [pre-check, security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==1.7.1

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true

      - name: Upload artifacts to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          files: |
            dist/*.whl
            dist/*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate changelog
        id: changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          futureRelease: ${{ github.event.inputs.version }}

      - name: Upload changelog to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

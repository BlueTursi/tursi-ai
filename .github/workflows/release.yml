name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  verify-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Preparing release for version $VERSION"

      - name: Verify version consistency
        run: |
          # Check pyproject.toml version
          if ! grep -q "version = \"${{ steps.get_version.outputs.version }}\"" pyproject.toml; then
            echo "Error: Version mismatch between tag (${{ steps.get_version.outputs.version }}) and pyproject.toml"
            exit 1
          fi

          # Check CHANGELOG.md entry
          if ! grep -q "\[${{ steps.get_version.outputs.version }}\]" CHANGELOG.md; then
            echo "Error: No changelog entry found for version ${{ steps.get_version.outputs.version }}"
            exit 1
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          poetry run pip install twine

      - name: Run tests
        run: poetry run pytest

      - name: Clean dist directory
        run: |
          rm -rf dist/
          mkdir -p dist/

      - name: Build package
        run: poetry build

      - name: Check distribution
        run: |
          poetry run twine check dist/*

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(github.ref, '-alpha.') || contains(github.ref, '-beta.') || contains(github.ref, '-rc.') }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: .github/release-template.md
          generate_release_notes: true

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
